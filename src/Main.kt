import java.util.Scanner
import kotlin.system.exitProcess

private const val version = 0.2f
private var ввод = Scanner(System.`in`)
var токен = ""
private var консоль = ""

fun main() {
    println("ArenaConsole $version (C) ScCraft 2015-2019")
    println("##################################")
    print("Введите токен от MyArena API\n>>>")
    токен = ввод.next()
    println("Авторизация завершена!")
    println("##################################")
    вывести_консоль()
    меню()
}

private fun обновить() {
    val запрос = API_запрос("getconsole", токен)
    консоль = "" + API_консоль.fromJSON(getOneLine(запрос.toHTTPs()))
}

private fun меню() {
        println("Для вывода справки ArenaConsole введите \"справка\"")
        val комманда = ввод.nextLine()
        println("##################################")
        println("# ВАШ ЗАПРОС ОБРАБАТЫВАЕТСЯ...   #")
        println("##################################")
    when (комманда) {
        "обновить" -> вывести_консоль()
        "выход" -> exitProcess(0)
        "стоп" -> остановить_сервер()
        "старт" -> запустить_сервер()
        "рестарт" -> перезагрузить_сервер()
        "справка" -> справка()
        else -> {
            выполнить_комманду(комманда)
            вывести_консоль()
        }
    }
    меню()
}

private fun справка() {
    println("########################################### СПРАВКА ###########################################")
    println("#---------------------------------------------------------------------------------------------#")
    println("# Чтобы выполнить комманду на вашем игровом сервере просто введите её и нажмите клавишу ENTER #")
    println("#---------------------------------------------------------------------------------------------#")
    println("# В программе есть зарезервированные комманды (они пишутся русскими буквами):                 #")
    println("# 1) справка    --> Вывод этой справки                                                        #")
    println("# 2) выход      --> Выход из программы                                                        #")
    println("# 3) обновить   --> Вывод консоли без запроса на выполнение комманды                          #")
    println("# 4) старт      --> Запустить сервер (если он выключен)                                       #")
    println("# 5) стоп       --> Остановить сервер (если он работает или завис)                            #")
    println("# 6) рестарт    --> Перезагрузить сервер                                                      #")
    println("################################################################################################")
}

private fun вывести_консоль() {
    обновить()
    println(консоль)
}

private fun выполнить_комманду(комманда: String) {
    val api_cmd = API_cmd(токен)
    api_cmd.cmd = комманда
    getOneLine(api_cmd.toHTTPs())
}

private fun запустить_сервер() {
    val api_запрос = API_запрос("start", токен)
    println(API_ответ.fromJSON(getOneLine(api_запрос.toHTTPs())))
    println("Запрос на запуск сервера отправлен")
}

private fun остановить_сервер() {
    val api_запрос = API_запрос("stop", токен)
    println(API_ответ.fromJSON(getOneLine(api_запрос.toHTTPs())))
    println("Запрос на остановку сервера отправлен")
}

private fun перезагрузить_сервер() {
    val api_запрос = API_запрос("restart", токен)
    println(API_ответ.fromJSON(getOneLine(api_запрос.toHTTPs())))
    println("Запрос на остановку сервера отправлен")
}